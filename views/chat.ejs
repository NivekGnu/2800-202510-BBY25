<%-/* views/chat.ejs */%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        body { font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; }
        #chatMessagesContainer {
            /* Make it scrollable and stick to the bottom */
            display: flex;
            flex-direction: column-reverse; /* Newest messages at the bottom, but keeps scroll at bottom */
            overflow-y: auto;
            /* Adjust height as needed, considering header and footer */
            height: calc(100vh - 10rem); /* Example: 100vh - header height - footer height */
        }
        .message-bubble {
            max-width: 70%;
            padding: 0.5rem 0.75rem;
            border-radius: 0.75rem;
            margin-bottom: 0.5rem;
            word-wrap: break-word; /* Break long words */
            white-space: pre-wrap; /* Preserve whitespace and newlines */
        }
        .message-sent {
            background-color: #2563eb; /* blue-600 */
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 0.125rem;
        }
        .message-received {
            background-color: #e5e7eb; /* gray-200 */
            color: #1f2937; /* gray-800 */
            margin-right: auto;
            border-bottom-left-radius: 0.125rem;
        }
        .message-image {
            max-width: 100%; /* Ensure image fits in bubble */
            max-height: 200px; /* Limit image height */
            border-radius: 0.5rem;
            margin-top: 0.25rem;
            cursor: pointer; /* Indicate it's clickable */
        }
        .message-timestamp {
            font-size: 0.75rem; /* text-xs */
            color: #6b7280; /* gray-500 */
            margin-top: 0.125rem;
            display: block;
        }
        .message-sent .message-timestamp {
            color: #d1d5db; /* gray-300 for sent messages */
            text-align: right;
        }
        .message-received .message-timestamp {
            text-align: left;
        }
        #imagePreviewContainer {
            position: relative;
            max-width: 100px;
            margin-bottom: 0.5rem;
        }
        #imagePreview {
            max-width: 100%;
            max-height: 100px;
            border-radius: 0.25rem;
            border: 1px solid #d1d5db;
        }
        #removeImagePreview {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: rgba(255, 0, 0, 0.7);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 0.8rem;
        }
        /* Modal for viewing full image */
        .image-modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.9);
            justify-content: center;
            align-items: center;
        }
        .image-modal-content {
            margin: auto;
            display: block;
            max-width: 90%;
            max-height: 90%;
        }
        .image-modal-close {
            position: absolute;
            top: 15px;
            right: 35px;
            color: #f1f1f1;
            font-size: 40px;
            font-weight: bold;
            transition: 0.3s;
            cursor: pointer;
        }
    </style>
</head>
<body class="bg-neutral-100">

  <div class="max-w-md mx-auto bg-white min-h-screen shadow-lg flex flex-col">
    <header class="flex justify-between items-center p-4 border-b border-gray-200 sticky top-0 bg-white z-20">
      <div class="w-6 h-6">
        <img src="/img/arrow.png" alt="Back" class="w-full h-full object-contain cursor-pointer" onclick="window.location.href='/contacts'">
      </div>
      <h1 class="text-lg font-semibold text-gray-900 truncate px-2">Chat with <%= otherUserName %></h1>
      <div class="w-6 h-6">
        <!-- Placeholder for potential actions like view profile -->
      </div>
    </header>

    <!-- Chat Messages Area -->
    <main id="chatMessagesContainer" class="flex-grow p-4 space-y-2 overflow-y-auto">
        <!-- Messages will be appended here by JavaScript -->
        <div id="loadingMessages" class="text-center text-gray-500 py-4">Loading messages...</div>
    </main>

    <!-- Message Input Area -->
    <footer class="p-3 border-t border-gray-200 bg-white sticky bottom-0">
        <div id="imagePreviewContainer" class="hidden">
            <img id="imagePreview" src="#" alt="Image preview"/>
            <span id="removeImagePreview" title="Remove image">×</span>
        </div>
        <form id="messageForm" class="flex items-center space-x-2">
            <label for="chatImageInput" class="p-2 rounded-md hover:bg-gray-100 cursor-pointer">
                <!-- Inlined Camera Icon -->
                <svg class="w-6 h-6 text-gray-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M6.827 6.175A2.31 2.31 0 015.186 7.23c-.38.054-.757.112-1.134.175C2.999 7.58 2.25 8.507 2.25 9.574V18a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9.574c0-1.067-.75-1.994-1.802-2.169a47.865 47.865 0 00-1.134-.175 2.31 2.31 0 01-1.64-1.055l-.822-1.316a2.192 2.192 0 00-1.736-1.039 48.774 48.774 0 00-5.232 0 2.192 2.192 0 00-1.736 1.039l-.821 1.316z" />
                  <path stroke-linecap="round" stroke-linejoin="round" d="M16.5 12.75a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0zM18.75 10.5h.008v.008h-.008V10.5z" />
                </svg>
            </label>
            <input type="file" id="chatImageInput" accept="image/*" class="hidden">

            <input type="text" id="messageInput" placeholder="Type a message..."
                   class="flex-grow p-2.5 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 text-sm"
                   autocomplete="off">
            <button type="submit" id="sendMessageButton"
                    class="bg-blue-600 hover:bg-blue-700 text-white p-2.5 rounded-md flex items-center justify-center">
                <!-- Inlined Send Icon -->
                <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
                </svg>
            </button>
        </form>
        <div id="errorMessage" class="text-red-500 text-xs mt-1"></div>
    </footer>

  <!-- Image Modal -->
  <div id="imageModal" class="image-modal">
    <span class="image-modal-close" id="closeImageModal">×</span>
    <img class="image-modal-content" id="fullImage">
  </div>

  <script>
    const currentUserId = "<%= currentUserId %>";
    const otherUserId = "<%= otherUserId %>";
    const chatId = "<%= chatId %>"; // Provided by the server

    const chatMessagesContainer = document.getElementById('chatMessagesContainer');
    const messageForm = document.getElementById('messageForm');
    const messageInput = document.getElementById('messageInput');
    const sendMessageButton = document.getElementById('sendMessageButton');
    const errorMessageDiv = document.getElementById('errorMessage');
    const loadingMessagesDiv = document.getElementById('loadingMessages');

    const chatImageInput = document.getElementById('chatImageInput');
    const imagePreviewContainer = document.getElementById('imagePreviewContainer');
    const imagePreview = document.getElementById('imagePreview');
    const removeImagePreviewButton = document.getElementById('removeImagePreview');
    let selectedImageFile = null;

    const imageModal = document.getElementById('imageModal');
    const fullImage = document.getElementById('fullImage');
    const closeImageModalButton = document.getElementById('closeImageModal');


    // --- Socket.IO Setup ---
    const socket = io();

    socket.on('connect', () => {
        console.log('Connected to Socket.IO server');
        socket.emit('joinChat', chatId); // Join the specific chat room
    });

    socket.on('newMessage', (message) => {
        console.log('Received new message:', message);
        if (message.chatId === chatId) { // Ensure message is for this chat
             appendMessage(message);
             scrollToBottom();
        }
    });

    socket.on('disconnect', () => {
        console.log('Disconnected from Socket.IO server');
        // Optionally, display a message to the user or try to reconnect
    });
    socket.on('connect_error', (err) => {
      console.error('Socket connection error:', err);
      errorMessageDiv.textContent = 'Error connecting to chat service. Please refresh.';
    });


    // --- Helper Functions ---
    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });
    }

    function appendMessage(msg) {
        const messageDiv = document.createElement('div');
        const isSent = msg.senderId === currentUserId;
        messageDiv.classList.add('message-bubble', isSent ? 'message-sent' : 'message-received');

        const textP = document.createElement('p');
        textP.textContent = msg.messageText || ""; // Handle cases where text might be empty (e.g. image only)

        const timeSpan = document.createElement('span');
        timeSpan.classList.add('message-timestamp');
        timeSpan.textContent = formatDate(msg.timestamp);
        
        messageDiv.appendChild(textP);

        if (msg.messageType === 'image' && msg.imageDataUri) {
            const imgElement = document.createElement('img');
            imgElement.src = msg.imageDataUri;
            imgElement.alt = msg.messageText || "Chat image";
            imgElement.classList.add('message-image');
            imgElement.onclick = () => openImageModal(msg.imageDataUri);
            messageDiv.appendChild(imgElement);
        }
        
        messageDiv.appendChild(timeSpan);
        // chatMessagesContainer.appendChild(messageDiv); // Appending at the end for normal flex order
        chatMessagesContainer.insertBefore(messageDiv, chatMessagesContainer.firstChild); // Insert at top for flex-direction: column-reverse
    }

    function scrollToBottom() {
        // For flex-direction: column-reverse, scroll to top (which is visually the bottom)
        chatMessagesContainer.scrollTop = 0;
        // If not using column-reverse:
        // chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
    }

    function openImageModal(src) {
        fullImage.src = src;
        imageModal.style.display = "flex";
    }

    closeImageModalButton.onclick = function() {
        imageModal.style.display = "none";
    }
    imageModal.onclick = function(event) { // Close if clicked outside the image
        if (event.target === imageModal) {
            imageModal.style.display = "none";
        }
    }


    // --- Load Initial Messages ---
    async function loadMessages() {
        try {
            loadingMessagesDiv.style.display = 'block';
            errorMessageDiv.textContent = '';
            const response = await fetch(`/api/chat/${chatId}/messages`);
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ error: "Failed to load messages. Server returned an error." }));
                throw new Error(errorData.error || `Server error: ${response.status}`);
            }
            const messages = await response.json();
            chatMessagesContainer.innerHTML = ''; // Clear previous or loading indicator (except loading div)
            chatMessagesContainer.appendChild(loadingMessagesDiv); // Re-add loading div to be managed

            if (messages.length === 0) {
                loadingMessagesDiv.textContent = 'No messages yet. Start the conversation!';
            } else {
                messages.forEach(appendMessage);
                loadingMessagesDiv.style.display = 'none';
            }
            scrollToBottom();
        } catch (error) {
            console.error('Error loading messages:', error);
            loadingMessagesDiv.style.display = 'none';
            errorMessageDiv.textContent = `Error: ${error.message}`;
        }
    }

    // --- Send Message ---
    messageForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const messageText = messageInput.value.trim();
        
        if (!messageText && !selectedImageFile) {
            return; // Don't send empty messages or if no image
        }

        sendMessageButton.disabled = true;
        errorMessageDiv.textContent = '';

        try {
            let response;
            let body;

            if (selectedImageFile) {
                const formData = new FormData();
                formData.append('chatId', chatId);
                formData.append('senderId', currentUserId);
                formData.append('receiverId', otherUserId);
                formData.append('chatImage', selectedImageFile);
                if (messageText) { // Caption for the image
                    formData.append('caption', messageText);
                }
                
                response = await fetch('/api/chat/messages/image', {
                    method: 'POST',
                    body: formData, // FormData sets Content-Type automatically
                });
                // Note: We don't append the message here for images, let the socket event handle it
                // to get the server-processed imageDataUri.

            } else if (messageText) {
                 body = JSON.stringify({
                    chatId,
                    senderId: currentUserId,
                    receiverId: otherUserId,
                    messageText,
                });
                response = await fetch('/api/chat/messages', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: body,
                });
            }


            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ error: "Failed to send message." }));
                throw new Error(errorData.error || `Server error: ${response.status}`);
            }
            
            // const sentMessage = await response.json(); // Not strictly needed if relying on socket for display

            messageInput.value = ''; // Clear input
            clearImagePreview(); // Clear image preview
            
        } catch (error) {
            console.error('Error sending message:', error);
            errorMessageDiv.textContent = `Error: ${error.message}`;
        } finally {
            sendMessageButton.disabled = false;
            messageInput.focus();
        }
    });

    // --- Image Preview Logic ---
    chatImageInput.addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
            selectedImageFile = file;
            const reader = new FileReader();
            reader.onload = function(e) {
                imagePreview.src = e.target.result;
                imagePreviewContainer.classList.remove('hidden');
            }
            reader.readAsDataURL(file);
        }
    });

    removeImagePreviewButton.addEventListener('click', clearImagePreview);

    function clearImagePreview() {
        selectedImageFile = null;
        chatImageInput.value = ''; // Reset file input
        imagePreviewContainer.classList.add('hidden');
        imagePreview.src = '#';
    }


    // --- Initial Load ---
    document.addEventListener('DOMContentLoaded', () => {
        loadMessages();
    });

  </script>
</body>
</html>