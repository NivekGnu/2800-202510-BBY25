<%- /* views/viewpage.ejs */%>
  <!DOCTYPE html>
  <html lang="en">

  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
      <%= post.produce || "Product Details" %>
    </title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
      body {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      }

      .qty-button {
        min-width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      #item-quality {
        height: 36px;
        display: flex;
        align-items: center;
        padding-top: 0.25rem;
        padding-bottom: 0.25rem;
      }

      #map {
        height: 100%;
        width: 100%;
      }

      .map-container {
        height: 12rem;
      }

      .seller-pfp-container {
        width: 3rem;
        height: 3rem;
      }
    </style>
  </head>

  <body class="bg-neutral-100">
    <%- include("templates/header") %>
      <%- include("templates/footer") %>

        <div class="max-w-md mx-auto bg-white min-h-screen shadow-lg relative pb-28">
          <header class="flex justify-between items-center p-4 border-b border-gray-200 sticky top-0 bg-white z-20">
            <div class="w-6 h-6"><img src="/img/arrow.png" alt="Back"
                class="w-full h-full object-contain cursor-pointer" onclick="window.history.back()"></div>
            <h1 class="text-xl font-semibold text-gray-900 truncate px-2">
              <%= post.produce %>
            </h1>
            <div class="w-6 h-6"><img src="/img/cart.png" alt="Cart" class="w-full h-full object-contain cursor-pointer"
                onclick="window.location.href='/cart'"></div>
          </header>

          <main class="p-4">
            <div class="flex justify-between items-center text-xs text-gray-500 mb-3">
              <div class="flex items-center space-x-1">
                <span>Posted on <%= new Date(post.createdAt).toLocaleString() %></span>
                <span class="bg-gray-400 rounded-full w-1 h-1 mx-1"></span>
                <span>
                  <% if (post.location) { %>
                    <%= post.location %>
                      <% } else if (post.seller && post.seller.location) { %>
                        <%= post.seller.location %>
                          <% } else { %> Location N/A <% } %>
                </span>
              </div>
              <div class="flex items-center space-x-1 text-sm text-gray-600">
                <div class="w-4 h-4"><img src="/img/star.png" alt="Rating star" class="w-full h-full object-contain">
                </div>
                <span>4.9 (610)</span>
                <%# Placeholder %>
              </div>
            </div>

            <div class="h-64 w-full mb-4 rounded-lg overflow-hidden bg-gray-200">
              <img src="<%= post.imageSrc || '/img/egg.jpeg' %>" alt="Image of <%= post.produce %>"
                class="h-full w-full object-cover">
            </div>

            <div class="mb-4">
              <div class="flex justify-between items-start">
                <div class="flex-grow mr-4">
                  <p class="text-xs <%= post.quantity > 0 ? 'text-green-600' : 'text-red-600' %> font-semibold">
                    <%= post.quantity> 0 ? `IN STOCK` : 'OUT OF STOCK' %>
                      <% if (post.quantity> 0) { %>(<%= post.quantity %> available)<% } %>
                  </p>
                  <p id="priceOfItem" class="text-3xl font-bold text-gray-900 mt-1">$<%= post.price.toFixed(2) %>
                  </p>
                  <div class="flex items-center space-x-1 mt-3 mb-4">
                    <span class="text-sm text-gray-700 mr-1">Qty</span>
                    <div class="flex items-center border border-gray-300 rounded-md">
                      <button id="qtyDownButton"
                        class="qty-button px-3 text-gray-800 hover:bg-gray-100 rounded-l-md text-lg font-medium disabled:opacity-50"
                        <%=post.quantity===0 ? 'disabled' : '' %>>-</button>
                      <span id="item-quality"
                        class="px-4 border-l border-r border-gray-300 text-gray-900 font-semibold text-base">1</span>
                      <button id="qtyUpButton"
                        class="qty-button px-3 text-gray-800 hover:bg-gray-100 rounded-r-md text-lg font-medium disabled:opacity-50"
                        <%=post.quantity===0 ? 'disabled' : '' %>>+</button>
                    </div>
                  </div>
                  <% if (post.seller && post.seller._id && post.seller._id.toString() !==session.userId) { %>
                    <button id="addToCartButton"
                      class="w-full bg-green-600 hover:bg-green-700 text-white py-2.5 px-6 rounded-md flex justify-center items-center text-md font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
                      <%=post.quantity===0 ? 'disabled' : '' %>>
                      Add to Cart - $<span id="totalPriceForCart">
                        <%= post.price.toFixed(2) %>
                      </span>
                    </button>
                    <% } %>
                </div>
                <% if (post.seller) { %>
                  <div class="text-right flex-shrink-0">
                    <div class="seller-pfp-container rounded-full mb-1 ml-auto overflow-hidden bg-gray-300">
                      <img src="<%= post.seller.profilePictureUrl || '/img/farmerpfp.png' %>"
                        alt="Seller: <%= post.seller.firstName %>" class="w-full h-full object-cover">
                    </div>
                    <p class="text-sm font-semibold text-gray-800">
                      <%= post.seller.firstName || 'Seller' %>
                        <%= post.seller.lastName || '' %>
                    </p>
                    <p class="text-xs text-gray-500">Seller's Detail</p>
                  </div>
                  <% } else { %>
                    <div class="text-right flex-shrink-0">
                      <div class="seller-pfp-container rounded-full mb-1 ml-auto overflow-hidden bg-gray-300">
                        <img src="/img/farmerpfp.png" alt="Seller N/A" class="w-full h-full object-cover">
                      </div>
                      <p class="text-sm font-semibold text-gray-800">Seller Information Unavailable</p>
                    </div>
                    <% } %>
              </div>
            </div>
            <hr class="my-4 border-gray-200">
            <div class="mb-4">
              <h2 class="text-lg font-semibold text-gray-800 mb-2">Description</h2>
              <p class="text-sm text-gray-700 leading-relaxed whitespace-pre-line">
                <%= post.description %>
              </p>
            </div>
            <hr class="my-4 border-gray-200">
            <div class="mb-4">
              <h2 class="text-lg font-semibold text-gray-800 mb-2">Item Location</h2>
              <div class="map-container w-full z-0 rounded-lg bg-gray-200 overflow-hidden">
                <div id="map" class="z-0" style="height: 25vh;"></div>
              </div>
            </div>
          </main>

          <footer class="fixed bottom-0 left-0 right-0 z-10">
            <div class="max-w-md mx-auto p-3 bg-white border-t border-gray-200">
              <% if (post.seller && post.seller._id && post.seller._id.toString() !==session.userId) { %>
                <button
                  class="bg-neutral-800 hover:bg-neutral-700 text-white py-3 px-6 rounded-md w-full flex justify-between items-center text-lg font-semibold"
                  onclick="window.location.href='/chat?with=<%= post.seller._id.toString() %>'">
                  <span>Chat</span>
                  <div class="w-7 h-6 bg-white rounded-sm flex items-center justify-center"><img
                      src="/img/chat-bubble-empty.svg" alt="Chat icon" class="w-5 h-5 filter invert brightness-0"></div>
                </button>
                <% } else if (post.seller && post.seller._id.toString()===session.userId) { %>
                  <p class="text-center text-gray-600 py-3">This is your own posting. You can <a
                      href="/post/<%= post._id %>/edit" class="text-green-600 hover:underline font-semibold">edit it
                      here</a>.</p>
                  <% } else { %>
                    <button
                      class="bg-gray-400 text-gray-700 py-3 px-6 rounded-md w-full text-lg font-semibold cursor-not-allowed"
                      disabled>Chat Unavailable</button>
                    <% } %>
            </div>
          </footer>
        </div>

        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
        <script>

          const map = L.map('map').setView([49.24871980930831, -122.98067289034908], 13);

          const accessToken = '<%= mapboxToken %>';

          const sellerInfo = <%- JSON.stringify(post.seller) %>;
          const sellerAddress = <%- JSON.stringify(post.seller.address) %>;

          // We can change to "streets-v11", "outdoors-v11", "satellite-v9", etc for different map views
          const mapboxStyle = 'mapbox/streets-v12';

          L.tileLayer(`https://api.mapbox.com/styles/v1/${mapboxStyle}/tiles/{z}/{x}/{y}?access_token=${accessToken}`, {
            tileSize: 512,
            zoomOffset: -1,
            attribution: '© <a href="https://www.mapbox.com/about/maps/">Mapbox</a> © <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
            accessToken: accessToken
          }).addTo(map);


          if (sellerAddress) {
            const addressString = `${sellerAddress.address}, ${sellerAddress.city}, ${sellerAddress.province}, ${sellerAddress.postalCode}`;

            fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(addressString)}.json?access_token=${accessToken}`)
              .then(res => res.json())
              .then(data => {
                if (data.features.length > 0) {
                  const [lng, lat] = data.features[0].center;
                  const marker = L.marker([lat, lng]).addTo(map);
                  marker.bindPopup(`
                  <a href="https://www.google.com/maps/place/${lat},${lng}" target="_blank" style="text-decoration: none; color: inherit; display: block;">
                    <div class="text-center">
                  <b>${sellerInfo.firstName} ${sellerInfo.lastName}</b>
                    <p>${sellerAddress.address}, ${sellerAddress.city}, ${sellerAddress.postalCode}<p>
                    </div>
                  </a>
                  `);
                }
              })
              .catch(err => {
                console.error("Geocoding failed for:", addressString, err);
              });
          }

          // Buyer's current location; needs their permission
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position) => {
              const latitude = position.coords.latitude;
              const longitude = position.coords.longitude;

              const marker = L.marker([latitude, longitude]).addTo(map);
              marker.bindPopup(`
            <a href="https://www.google.com/maps/place/${latitude},${longitude}" target="_blank" style="text-decoration: none; color: inherit; display: block;">
              <b>Your current location</b>
            </a>
          `).openPopup();
            },
              (error) => {
                console.error("Error getting location:", error.message);
              }
            );
          } else {
            console.error("Geolocation is not supported by this browser.");
          }

          // --- Configuration & Initial Data (from EJS) ---
          const productConfig = {
            basePrice: parseFloat("<%= post.price %>"),
            maxQuantity: parseInt("<%= post.quantity %>"),
            id: "<%= post._id %>",
            produceName: "<%= post.produce %>",
            imageSrc: "<%= post.imageSrc %>",

            // --- PRODUCTION VERSION ---
            // These now dynamically use the 'post.seller' object passed from index.js
            // It's crucial that 'post.seller' contains '_id', 'firstName', and 'lastName'
            sellerId: "<%= post.seller && post.seller._id ? post.seller._id.toString() : 'UNKNOWN_SELLER_ID' %>",
            sellerName: "<%= post.seller && post.seller.firstName ? (post.seller.firstName + ' ' + (post.seller.lastName || '')).trim() : 'Unknown Seller' %>"
            // --- END PRODUCTION VERSION ---
          };
          let selectedQuantity = 1;

          // --- DOM Elements ---
          const priceDisplayElement = document.getElementById("priceOfItem");
          const quantityDisplayElement = document.getElementById("item-quality");
          const totalPriceForCartElement = document.getElementById("totalPriceForCart");
          const addToCartButtonElement = document.getElementById("addToCartButton");
          const qtyUpButtonElement = document.getElementById("qtyUpButton");
          const qtyDownButtonElement = document.getElementById("qtyDownButton");
          const mapContainerElement = document.getElementById('map');

          // --- Helper Functions ---
          function updateDisplayedPrices() {
            const currentTotalPrice = selectedQuantity * productConfig.basePrice;
            if (priceDisplayElement) {
              priceDisplayElement.innerText = `$${currentTotalPrice.toFixed(2)}`;
            }
            if (totalPriceForCartElement) {
              totalPriceForCartElement.innerText = currentTotalPrice.toFixed(2);
            }
          }

          // --- Quantity Controls Logic ---
          function initializeQuantityControls() {
            if (!qtyUpButtonElement || !qtyDownButtonElement || !quantityDisplayElement) return;

            qtyUpButtonElement.addEventListener('click', () => {
              if (selectedQuantity < productConfig.maxQuantity && productConfig.maxQuantity > 0) {
                selectedQuantity++;
                quantityDisplayElement.innerText = selectedQuantity;
                updateDisplayedPrices();
              }
            });

            qtyDownButtonElement.addEventListener('click', () => {
              if (selectedQuantity > 1 && productConfig.maxQuantity > 0) {
                selectedQuantity--;
                quantityDisplayElement.innerText = selectedQuantity;
                updateDisplayedPrices();
              }
            });

            if (productConfig.maxQuantity > 0) {
              updateDisplayedPrices();
            } else {
              [qtyUpButtonElement, qtyDownButtonElement].forEach(btn => btn.disabled = true);
              quantityDisplayElement.innerText = '0';
              if (totalPriceForCartElement) totalPriceForCartElement.innerText = "0.00";
            }
          }

          // --- Add to Cart Logic ---
          function initializeAddToCart() {
            if (!addToCartButtonElement) return;

            addToCartButtonElement.addEventListener('click', () => {
              if (productConfig.maxQuantity === 0) {
                alert("This item is out of stock and cannot be added to cart.");
                return;
              }
              if (productConfig.sellerId === 'UNKNOWN_SELLER_ID') {
                alert("Seller information is missing for this product. Cannot add to cart.");
                return;
              }

              const cartItem = {
                id: productConfig.id,
                produce: productConfig.produceName,
                price: productConfig.basePrice,
                quantity: selectedQuantity,
                imageSrc: productConfig.imageSrc,
                sellerId: productConfig.sellerId,
                sellerName: productConfig.sellerName
              };

              let cart = JSON.parse(localStorage.getItem('cart') || '{}');
              if (!cart[cartItem.sellerId]) {
                cart[cartItem.sellerId] = { sellerName: cartItem.sellerName, items: [] };
              }
              const existingItemIndex = cart[cartItem.sellerId].items.findIndex(item => item.id === cartItem.id);
              if (existingItemIndex > -1) {
                let newQuantity = cart[cartItem.sellerId].items[existingItemIndex].quantity + cartItem.quantity;
                if (newQuantity > productConfig.maxQuantity) {
                  alert(`You can only add up to ${productConfig.maxQuantity} of this item. Cart updated to max.`);
                  newQuantity = productConfig.maxQuantity;
                }
                cart[cartItem.sellerId].items[existingItemIndex].quantity = newQuantity;
              } else {
                if (cartItem.quantity > productConfig.maxQuantity) {
                  alert(`You can only add up to ${productConfig.maxQuantity} of this item. Quantity set to max.`);
                  cartItem.quantity = productConfig.maxQuantity;
                }
                cart[cartItem.sellerId].items.push(cartItem);
              }
              localStorage.setItem('cart', JSON.stringify(cart));
              alert(`${selectedQuantity} x ${cartItem.produce} added/updated in cart!`);
            });
          }
        </script>
  </body>

  </html>